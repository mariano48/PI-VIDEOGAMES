{"ast":null,"code":"import axios from \"axios\";\nimport { CREATE_GAME, FILTER_BY, GET_ALL_GENRES, GET_ALL_PLATFORMS, GET_ALL_VIDEOGAMES, GET_GAMES_BY_NAME, GET_GAME_BY_ID, LOADING, ERROR, RESET_FILTERS, SORT_GAMES } from \"./common/constants\"; // export function getAllVideogames() {\n//   return async function (dispatch) {\n//     dispatch({ type: LOADING });\n//     try {\n//       const response = await axios.get(`http://localhost:3001/videogames`);\n//       return dispatch({\n//         type: GET_ALL_VIDEOGAMES,\n//         payload: response.data,\n//       });\n//     } catch (error) {\n//       return dispatch({\n//         type: ERROR,\n//         payload: error.message,\n//       });\n//     }\n//   };\n// }\n\nexport function getAllVideogames() {\n  return async function (dispatch) {\n    return fetch(`http://localhost:3001/videogames`).then(data => data.json()).then(data => dispatch({\n      GET_ALL_VIDEOGAMES,\n      payload: data\n    }));\n  };\n}\nexport function getAllGenres() {\n  return async function (dispatch) {\n    const response = await axios.get(`http://localhost:3001/genres`);\n    return dispatch({\n      type: GET_ALL_GENRES,\n      payload: response.data\n    });\n  };\n}\nexport function getGameById(value) {\n  const id = value.match.params.id;\n  return async function (dispatch) {\n    dispatch({\n      type: LOADING\n    });\n\n    try {\n      const response = await axios.get(`http://localhost:3001/videogames/${id}`);\n      return dispatch({\n        type: GET_GAME_BY_ID,\n        payload: response.data\n      });\n    } catch (error) {\n      return dispatch({\n        type: ERROR,\n        payload: error.message\n      });\n    }\n  };\n}\nexport function getVideogamesByName(value) {\n  return async function (dispatch) {\n    dispatch({\n      type: LOADING\n    });\n\n    try {\n      const response = await axios.get(`http://localhost:3001/videogames`, {\n        params: {\n          search: value\n        }\n      });\n      return dispatch({\n        type: GET_GAMES_BY_NAME,\n        payload: response.data\n      });\n    } catch (error) {\n      return dispatch({\n        type: ERROR,\n        payload: error.message\n      });\n    }\n  };\n}\nexport function getAllPlatforms() {\n  return async function (dispatch) {\n    try {\n      const response = await axios.get(`http://localhost:3001/platforms`);\n      return dispatch({\n        type: GET_ALL_PLATFORMS,\n        payload: response.data\n      });\n    } catch (error) {\n      return dispatch({\n        type: ERROR,\n        payload: error.message\n      });\n    }\n  };\n}\nexport function filterBy(values) {\n  return function (dispatch) {\n    return dispatch({\n      type: FILTER_BY,\n      payload: values\n    });\n  };\n}\nexport function sortGames(values) {\n  return function (dispatch) {\n    return dispatch({\n      type: SORT_GAMES,\n      payload: values\n    });\n  };\n}\nexport function createGame(values) {\n  return async function (dispatch) {\n    dispatch({\n      type: LOADING\n    });\n\n    try {\n      const response = await axios.post(`http://localhost:3001/videogames`, {\n        name: values.name[0].toUpperCase() + values.name.slice(1).toLowerCase(),\n        description: values.description,\n        released: values.released,\n        rating: values.rating,\n        image: values.image,\n        platforms: values.platforms,\n        genres: values.genres\n      });\n      return dispatch({\n        type: CREATE_GAME,\n        payload: response.data\n      });\n    } catch (error) {\n      return dispatch({\n        type: ERROR,\n        payload: error.message\n      });\n    }\n  };\n}\nexport function resetFilters(payload) {\n  return function (dispatch) {\n    return dispatch({\n      type: RESET_FILTERS,\n      payload\n    });\n  };\n}","map":{"version":3,"names":["axios","CREATE_GAME","FILTER_BY","GET_ALL_GENRES","GET_ALL_PLATFORMS","GET_ALL_VIDEOGAMES","GET_GAMES_BY_NAME","GET_GAME_BY_ID","LOADING","ERROR","RESET_FILTERS","SORT_GAMES","getAllVideogames","dispatch","fetch","then","data","json","payload","getAllGenres","response","get","type","getGameById","value","id","match","params","error","message","getVideogamesByName","search","getAllPlatforms","filterBy","values","sortGames","createGame","post","name","toUpperCase","slice","toLowerCase","description","released","rating","image","platforms","genres","resetFilters"],"sources":["/home/mariano/Documents/PI-Videogames-main/client/src/redux/actions.js"],"sourcesContent":["import axios from \"axios\";\nimport {\n  CREATE_GAME,\n  FILTER_BY,\n  GET_ALL_GENRES,\n  GET_ALL_PLATFORMS,\n  GET_ALL_VIDEOGAMES,\n  GET_GAMES_BY_NAME,\n  GET_GAME_BY_ID,\n  LOADING,\n  ERROR,\n  RESET_FILTERS,\n  SORT_GAMES,\n} from \"./common/constants\";\n\n// export function getAllVideogames() {\n//   return async function (dispatch) {\n//     dispatch({ type: LOADING });\n//     try {\n//       const response = await axios.get(`http://localhost:3001/videogames`);\n//       return dispatch({\n//         type: GET_ALL_VIDEOGAMES,\n//         payload: response.data,\n//       });\n//     } catch (error) {\n//       return dispatch({\n//         type: ERROR,\n//         payload: error.message,\n//       });\n//     }\n//   };\n// }\n\nexport function getAllVideogames() {\n  return async function (dispatch) {\n    return fetch(`http://localhost:3001/videogames`)\n      .then((data) => data.json())\n      .then((data) => dispatch({ GET_ALL_VIDEOGAMES, payload: data }));\n  };\n}\n\nexport function getAllGenres() {\n  return async function (dispatch) {\n    const response = await axios.get(`http://localhost:3001/genres`);\n    return dispatch({\n      type: GET_ALL_GENRES,\n      payload: response.data,\n    });\n  };\n}\n\nexport function getGameById(value) {\n  const id = value.match.params.id;\n  return async function (dispatch) {\n    dispatch({ type: LOADING });\n    try {\n      const response = await axios.get(\n        `http://localhost:3001/videogames/${id}`\n      );\n      return dispatch({\n        type: GET_GAME_BY_ID,\n        payload: response.data,\n      });\n    } catch (error) {\n      return dispatch({\n        type: ERROR,\n        payload: error.message,\n      });\n    }\n  };\n}\n\nexport function getVideogamesByName(value) {\n  return async function (dispatch) {\n    dispatch({ type: LOADING });\n    try {\n      const response = await axios.get(`http://localhost:3001/videogames`, {\n        params: { search: value },\n      });\n      return dispatch({\n        type: GET_GAMES_BY_NAME,\n        payload: response.data,\n      });\n    } catch (error) {\n      return dispatch({\n        type: ERROR,\n        payload: error.message,\n      });\n    }\n  };\n}\n\nexport function getAllPlatforms() {\n  return async function (dispatch) {\n    try {\n      const response = await axios.get(`http://localhost:3001/platforms`);\n      return dispatch({\n        type: GET_ALL_PLATFORMS,\n        payload: response.data,\n      });\n    } catch (error) {\n      return dispatch({\n        type: ERROR,\n        payload: error.message,\n      });\n    }\n  };\n}\n\nexport function filterBy(values) {\n  return function (dispatch) {\n    return dispatch({\n      type: FILTER_BY,\n      payload: values,\n    });\n  };\n}\n\nexport function sortGames(values) {\n  return function (dispatch) {\n    return dispatch({\n      type: SORT_GAMES,\n      payload: values,\n    });\n  };\n}\n\nexport function createGame(values) {\n  return async function (dispatch) {\n    dispatch({ type: LOADING });\n    try {\n      const response = await axios.post(`http://localhost:3001/videogames`, {\n        name: values.name[0].toUpperCase() + values.name.slice(1).toLowerCase(),\n        description: values.description,\n        released: values.released,\n        rating: values.rating,\n        image: values.image,\n        platforms: values.platforms,\n        genres: values.genres,\n      });\n      return dispatch({\n        type: CREATE_GAME,\n        payload: response.data,\n      });\n    } catch (error) {\n      return dispatch({\n        type: ERROR,\n        payload: error.message,\n      });\n    }\n  };\n}\n\nexport function resetFilters(payload) {\n  return function (dispatch) {\n    return dispatch({\n      type: RESET_FILTERS,\n      payload,\n    });\n  };\n}\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,WADF,EAEEC,SAFF,EAGEC,cAHF,EAIEC,iBAJF,EAKEC,kBALF,EAMEC,iBANF,EAOEC,cAPF,EAQEC,OARF,EASEC,KATF,EAUEC,aAVF,EAWEC,UAXF,QAYO,oBAZP,C,CAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAT,GAA4B;EACjC,OAAO,gBAAgBC,QAAhB,EAA0B;IAC/B,OAAOC,KAAK,CAAE,kCAAF,CAAL,CACJC,IADI,CACEC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADX,EAEJF,IAFI,CAEEC,IAAD,IAAUH,QAAQ,CAAC;MAAER,kBAAF;MAAsBa,OAAO,EAAEF;IAA/B,CAAD,CAFnB,CAAP;EAGD,CAJD;AAKD;AAED,OAAO,SAASG,YAAT,GAAwB;EAC7B,OAAO,gBAAgBN,QAAhB,EAA0B;IAC/B,MAAMO,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CAAW,8BAAX,CAAvB;IACA,OAAOR,QAAQ,CAAC;MACdS,IAAI,EAAEnB,cADQ;MAEde,OAAO,EAAEE,QAAQ,CAACJ;IAFJ,CAAD,CAAf;EAID,CAND;AAOD;AAED,OAAO,SAASO,WAAT,CAAqBC,KAArB,EAA4B;EACjC,MAAMC,EAAE,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBF,EAA9B;EACA,OAAO,gBAAgBZ,QAAhB,EAA0B;IAC/BA,QAAQ,CAAC;MAAES,IAAI,EAAEd;IAAR,CAAD,CAAR;;IACA,IAAI;MACF,MAAMY,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CACpB,oCAAmCI,EAAG,EADlB,CAAvB;MAGA,OAAOZ,QAAQ,CAAC;QACdS,IAAI,EAAEf,cADQ;QAEdW,OAAO,EAAEE,QAAQ,CAACJ;MAFJ,CAAD,CAAf;IAID,CARD,CAQE,OAAOY,KAAP,EAAc;MACd,OAAOf,QAAQ,CAAC;QACdS,IAAI,EAAEb,KADQ;QAEdS,OAAO,EAAEU,KAAK,CAACC;MAFD,CAAD,CAAf;IAID;EACF,CAhBD;AAiBD;AAED,OAAO,SAASC,mBAAT,CAA6BN,KAA7B,EAAoC;EACzC,OAAO,gBAAgBX,QAAhB,EAA0B;IAC/BA,QAAQ,CAAC;MAAES,IAAI,EAAEd;IAAR,CAAD,CAAR;;IACA,IAAI;MACF,MAAMY,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CAAW,kCAAX,EAA8C;QACnEM,MAAM,EAAE;UAAEI,MAAM,EAAEP;QAAV;MAD2D,CAA9C,CAAvB;MAGA,OAAOX,QAAQ,CAAC;QACdS,IAAI,EAAEhB,iBADQ;QAEdY,OAAO,EAAEE,QAAQ,CAACJ;MAFJ,CAAD,CAAf;IAID,CARD,CAQE,OAAOY,KAAP,EAAc;MACd,OAAOf,QAAQ,CAAC;QACdS,IAAI,EAAEb,KADQ;QAEdS,OAAO,EAAEU,KAAK,CAACC;MAFD,CAAD,CAAf;IAID;EACF,CAhBD;AAiBD;AAED,OAAO,SAASG,eAAT,GAA2B;EAChC,OAAO,gBAAgBnB,QAAhB,EAA0B;IAC/B,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CAAW,iCAAX,CAAvB;MACA,OAAOR,QAAQ,CAAC;QACdS,IAAI,EAAElB,iBADQ;QAEdc,OAAO,EAAEE,QAAQ,CAACJ;MAFJ,CAAD,CAAf;IAID,CAND,CAME,OAAOY,KAAP,EAAc;MACd,OAAOf,QAAQ,CAAC;QACdS,IAAI,EAAEb,KADQ;QAEdS,OAAO,EAAEU,KAAK,CAACC;MAFD,CAAD,CAAf;IAID;EACF,CAbD;AAcD;AAED,OAAO,SAASI,QAAT,CAAkBC,MAAlB,EAA0B;EAC/B,OAAO,UAAUrB,QAAV,EAAoB;IACzB,OAAOA,QAAQ,CAAC;MACdS,IAAI,EAAEpB,SADQ;MAEdgB,OAAO,EAAEgB;IAFK,CAAD,CAAf;EAID,CALD;AAMD;AAED,OAAO,SAASC,SAAT,CAAmBD,MAAnB,EAA2B;EAChC,OAAO,UAAUrB,QAAV,EAAoB;IACzB,OAAOA,QAAQ,CAAC;MACdS,IAAI,EAAEX,UADQ;MAEdO,OAAO,EAAEgB;IAFK,CAAD,CAAf;EAID,CALD;AAMD;AAED,OAAO,SAASE,UAAT,CAAoBF,MAApB,EAA4B;EACjC,OAAO,gBAAgBrB,QAAhB,EAA0B;IAC/BA,QAAQ,CAAC;MAAES,IAAI,EAAEd;IAAR,CAAD,CAAR;;IACA,IAAI;MACF,MAAMY,QAAQ,GAAG,MAAMpB,KAAK,CAACqC,IAAN,CAAY,kCAAZ,EAA+C;QACpEC,IAAI,EAAEJ,MAAM,CAACI,IAAP,CAAY,CAAZ,EAAeC,WAAf,KAA+BL,MAAM,CAACI,IAAP,CAAYE,KAAZ,CAAkB,CAAlB,EAAqBC,WAArB,EAD+B;QAEpEC,WAAW,EAAER,MAAM,CAACQ,WAFgD;QAGpEC,QAAQ,EAAET,MAAM,CAACS,QAHmD;QAIpEC,MAAM,EAAEV,MAAM,CAACU,MAJqD;QAKpEC,KAAK,EAAEX,MAAM,CAACW,KALsD;QAMpEC,SAAS,EAAEZ,MAAM,CAACY,SANkD;QAOpEC,MAAM,EAAEb,MAAM,CAACa;MAPqD,CAA/C,CAAvB;MASA,OAAOlC,QAAQ,CAAC;QACdS,IAAI,EAAErB,WADQ;QAEdiB,OAAO,EAAEE,QAAQ,CAACJ;MAFJ,CAAD,CAAf;IAID,CAdD,CAcE,OAAOY,KAAP,EAAc;MACd,OAAOf,QAAQ,CAAC;QACdS,IAAI,EAAEb,KADQ;QAEdS,OAAO,EAAEU,KAAK,CAACC;MAFD,CAAD,CAAf;IAID;EACF,CAtBD;AAuBD;AAED,OAAO,SAASmB,YAAT,CAAsB9B,OAAtB,EAA+B;EACpC,OAAO,UAAUL,QAAV,EAAoB;IACzB,OAAOA,QAAQ,CAAC;MACdS,IAAI,EAAEZ,aADQ;MAEdQ;IAFc,CAAD,CAAf;EAID,CALD;AAMD"},"metadata":{},"sourceType":"module"}